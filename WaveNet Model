from tensorflow.keras import layers, models

def build_wavenet_model(input_shape):
    inputs = layers.Input(shape=input_shape)
    x = layers.Conv1D(64, kernel_size=2, dilation_rate=1, activation='relu', padding='causal')(inputs)
    x = layers.Conv1D(64, kernel_size=2, dilation_rate=2, activation='relu', padding='causal')(x)
    x = layers.GlobalAveragePooling1D()(x)
    x = layers.Dense(64, activation='relu')(x)
    outputs = layers.Dense(2, activation='softmax')(x)
    return models.Model(inputs, outputs)

wavenet_model = build_wavenet_model((SR * DURATION, 1))
wavenet_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
